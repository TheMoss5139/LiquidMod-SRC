/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C16PacketClientStatus;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@ModuleInfo(name = "PingSpoof", description = "Spoofs your ping to a given value.", category = ModuleCategory.EXPLOIT)
public class PingSpoof extends Module {

    private final IntegerValue maxDelayValue = new IntegerValue("MaxDelay", 1000, 0, 5000) {
        @Override
        protected void onChanged(final Integer oldValue, final Integer newValue) {
            final int minDelayValue = PingSpoof.this.minDelayValue.get();

            if(minDelayValue > newValue)
                set(minDelayValue);
        }
    };

    private final IntegerValue minDelayValue = new IntegerValue("MinDelay", 500, 0, 5000) {

        @Override
        protected void onChanged(final Integer oldValue, final Integer newValue) {
            final int maxDelayValue = PingSpoof.this.maxDelayValue.get();

            if(maxDelayValue < newValue)
                set(maxDelayValue);
        }
    };

    private ArrayList<Packet> packets = new ArrayList<>();
    private MSTimer timer = new MSTimer();
    private int randomtime = 0;

    @Override
    public void onEnable() {
        packets.clear();
        timer.reset();
        randomtime = RandomUtils.nextInt(minDelayValue.get(), maxDelayValue.get());
    }

    @EventTarget
    public void onPacket(final PacketEvent event) {
        final Packet packet = event.getPacket();

        if ((packet instanceof C00PacketKeepAlive || packet instanceof C16PacketClientStatus) && !(mc.thePlayer.isDead || mc.thePlayer.getHealth() <= 0)) {
            event.cancelEvent();
            if (timer.hasTimePassed((long) randomtime)) {
                packets.add(packet);
            }
        }
    }

    @EventTarget(ignoreCondition = true)
    public void onUpdate(final UpdateEvent event) {
        if (timer.hasTimePassed((long) randomtime)) {
            packets.forEach(packet -> mc.getNetHandler().addToSendQueue(packet));
            packets.clear();
            timer.reset();
            randomtime = RandomUtils.nextInt(minDelayValue.get(), maxDelayValue.get());
        }
    }

}
